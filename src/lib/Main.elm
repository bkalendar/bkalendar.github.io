module Main exposing (main)

import Array exposing (Array)
import Browser
import Converter exposing (timetableToEvents)
import Css exposing (hex, pct, px, rem, vh)
import Event exposing (Event)
import Html.Styled as Html exposing (Html, toUnstyled)
import Html.Styled.Attributes exposing (css, download, for, href, id, name, src, target, value)
import Html.Styled.Events exposing (onClick, onInput)
import Markdown
import Timetable exposing (Timetable)
import Url exposing (percentEncode)


type alias Model =
    { raw : String
    , readyToDownload : Bool
    , events : Array Event
    }


main : Program () Model Msg
main =
    Browser.element
        { init = init
        , view = view >> toUnstyled
        , update = update
        , subscriptions = subscriptions
        }


init : flags -> ( Model, Cmd msg )
init _ =
    ( { raw = ""
      , readyToDownload = False
      , events = Array.empty
      }
    , Cmd.none
    )


view : Model -> Html Msg
view model =
    Html.div [ css [ Css.maxWidth (px 520), Css.margin Css.auto ] ]
        [ Html.div
            [ css
                [ Css.minHeight (vh 100)
                , Css.displayFlex
                , Css.flexDirection Css.column
                , Css.alignItems Css.center
                , Css.paddingTop (pct 20)
                ]
            ]
            [ Html.h1 [ css [ Css.color darkBlue ] ] [ Html.text "BKalendar" ]
            , Html.label
                [ for "timetable-input"
                , css
                    [ Css.display Css.block
                    , Css.marginBottom (rem 0.5)
                    ]
                ]
                [ Html.text "Copy r·ªìi d√°n th·ªùi kh√≥a bi·ªÉu v√†o ƒë√¢y" ]
            , Html.textarea
                [ css
                    [ Css.width (pct 100)
                    , Css.height (px 100)
                    , Css.borderWidth (px 2)
                    , Css.borderRadius (px 5)
                    , Css.borderStyle Css.solid
                    , Css.borderColor lightGray
                    ]
                , id "timetable-input"
                , name "timetable-input"
                , onInput GotInput
                , value model.raw
                ]
                []
            , if not model.readyToDownload then
                Html.p []
                    [ Html.text "Copy t·ª´ d√≤ng \""
                    , Html.span [ css [ Css.fontStyle Css.italic ] ] [ Html.text "H·ªçc k·ª≥ 1..." ]
                    , Html.text "\" ƒë·∫øn cu·ªëi c√°i b·∫£ng nh√©."
                    ]

              else
                viewDownload model.events
            ]
        , viewGuide
        ]


viewGuide : Html Msg
viewGuide =
    Html.div []
        [ Html.fromUnstyled <| Markdown.toHtml [] """---

D∆∞·ªõi ƒë√¢y l√† c√°c b∆∞·ªõc s·ª≠ d·ª•ng file m·ªõi t·∫£i.

## T·∫°o l·ªãch m·ªõi tr√™n Google Calendar

1. M·ªü Google Calendar tr√™n m√°y t√≠nh.
2. ·ªû thanh b√™n tr√°i, k√©o xu·ªëng, c·∫°nh ph·∫ßn **L·ªãch kh√°c**, h√£y nh·∫•p v√†o bi·ªÉu t∆∞·ª£ng **Th√™m l·ªãch kh√°c +** r·ªìi **T·∫°o l·ªãch m·ªõi**.
3. Th√™m t√™n l·ªãch, **HK211** ch·∫≥ng h·∫°n.
4. Nh·∫•p v√†o **T·∫°o l·ªãch**.

## Nh·∫≠p file .ics v√†o l·ªãch m·ªõi t·∫°o

Sau khi t·∫°o l·ªãch:

1. ·ªû b√™n tr√°i, h√£y nh·∫•p v√†o **Nh·∫≠p v√† xu·∫•t**.
2. Nh·∫•p v√†o **Ch·ªçn t·ªáp t·ª´ m√°y t√≠nh** r·ªìi ch·ªçn file v·ª´a t·∫£i v·ªÅ.
3. Ch·ªçn l·ªãch m√† b·∫°n v·ª´a t·∫°o ·ªü b∆∞·ªõc tr√™n.
4. Nh·∫•p v√†o **Nh·∫≠p**.

V·∫≠y l√† xong r·ªìi √°! üòÅ

___

## Bonus: B·∫≠t th√¥ng b√°o cho l·ªãch.

1. ·ªû b√™n tr√°i, h√£y nh·∫•p v√†o l·ªãch m√† b·∫°n v·ª´a t·∫°o.
2. K√©o xu·ªëng v√† t√¨m ch·ªó **Th√¥ng b√°o s·ª± ki·ªán**, nh·∫≠p v√†o **Th√™m th√¥ng b√°o**
3. Ch·ªânh th·ªùi gian l·∫°i nh∆∞ √Ω mu·ªën l√† ƒë∆∞·ª£c!

Sau khi l√†m xong, tr∆∞·ªõc m·ªói gi·ªù h·ªçc, app Google Calendar tr√™n ƒëi·ªán tho·∫°i c·ªßa b·∫°n s·∫Ω th√¥ng b√°o.

## Bonus 2: Th√™m link Google Meet

N·∫øu b·∫°n s·ª≠ d·ª•ng mail tr∆∞·ªùng th√¨ s·∫Ω c√≥ th√™m m·ªôt t√≠nh nƒÉng th√™m link Google Meet. Th√™m nh∆∞ sau:

1. Nh·∫•p v√†o t·ª´ng s·ª± ki·ªán r·ªìi nh·∫•p v√†o c√¢y b√∫t **Ch·ªânh s·ª≠a s·ª± ki·ªán**.
2. Nh·∫•p v√†o c√°i n√∫t m√†u xanh **Th√™m h·ªôi ngh·ªã truy·ªÅn h√¨nh tr√™n Google Meet**.
3. Nh·∫•p v√†o m≈©i t√™n ch·ªâ xu·ªëng k·∫ø b√™n b√°nh rƒÉng.
4. R√™ chu·ªôt v√†o k·∫ø b√™n link Meet, nh·∫•p v√†o c√¢y b√∫t ƒë·ªÉ ch·ªânh s·ª≠a link th√†nh link meet c·ªßa th·∫ßy c√¥ c√°c b·∫°n.

C√≤n kh√¥ng, c√°c b·∫°n th√™m link Meet v√†o √¥ ƒë·ªãa ƒëi·ªÉm hay m√¥ t·∫£ c≈©ng ƒë∆∞·ª£c.

___

Made with love by [NDK](https://www.facebook.com/dykhng) ‚ù§Ô∏è
""" ]


darkBlue : Css.Color
darkBlue =
    hex "032b91"


blue : Css.Color
blue =
    hex "1488db"


white : Css.Color
white =
    hex "ffffff"


lightGray : Css.Color
lightGray =
    hex "D1D5DB"


viewDownload : Array Event -> Html Msg
viewDownload events =
    let
        downloadLink =
            "data:text/calendar," ++ percentEncode (Array.toList events |> Event.toCalendar)
    in
    Html.div []
        [ Html.p [ css [ Css.textAlign Css.center ] ]
            [ Html.a
                [ target "_blank"
                , href downloadLink
                , download "export"
                , css
                    [ Css.backgroundColor blue
                    , Css.color white
                    , Css.textDecoration Css.none
                    , Css.padding2 (rem 0.25) (rem 0.5)
                    , Css.borderRadius (rem 0.25)
                    ]
                ]
                [ Html.text "T·∫£i v·ªÅ" ]
            ]
        , Html.p [] [ Html.text "N·∫øu b·∫°n ch∆∞a r√µ t·∫£i v·ªÅ r·ªìi l√†m g√¨, ƒë·ªçc ti·∫øp h∆∞·ªõng d·∫´n b√™n d∆∞·ªõi üëá" ]
        ]


type Msg
    = GotInput String
    | GotEvent Int Event


update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        GotInput raw ->
            let
                parseResult =
                    Timetable.parse raw
            in
            ( { model | raw = raw, readyToDownload = False, events = Array.empty }
            , case parseResult of
                Nothing ->
                    Cmd.none

                Just timetable ->
                    timetableToEvents (GotEvent (List.length timetable.entries)) timetable
            )

        GotEvent total event ->
            ( { model
                | events = Array.push event model.events
                , readyToDownload = Array.length model.events + 1 == total
              }
            , Cmd.none
            )


subscriptions : Model -> Sub Msg
subscriptions _ =
    Sub.none
